openapi: 3.0.0
info:
  description: Este es un ejemplo de documentación de una API con el CRUD de Usuarios
  version: 0.1.2
  title: API usuarios
servers:
  - url: 'http://localhost:8082/api'
    description: 'Entorno local desarrollo'
paths:
  /usuarios:
    get:
      security: 
      - bearerAuth: []
      tags: 
        - usuarios
      summary: Listar usuarios
      description: Este método lista los usuarios de la base de datos
      responses:
        200:
          description: operacion correcta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        500:
          description: error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      security: 
      - bearerAuth: []
      tags:
        - usuarios
      summary: crear usuarios
      description: Este método crea usuarios
      responses:
        200:
          description: operacion correcta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        500:
          description: error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'

  /usuarios/{id}:
    put:
      parameters:
          - $ref: '#/components/parameters/idParam'
      security: 
      - bearerAuth: []
      tags:
        - usuarios
      summary: crear usuarios
      description: Este método actualiza a un usuario
      responses:
        200:
          description: operacion correcta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        500:
          description: error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'


components:

  

  parameters:
    idParam:
      required: true
      name: id
      in: path
      description: " identificador usuario"
      example: 10
      schema:
        type: integer
        minimum: 1
    
    skipParam:
      name: skip
      in: query
      description: "número de resultados desde el que partir"
      example: 0
      schema:
        type: integer    


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
   
      
  schemas:    
    Usuario:
      type: object
      required: 
        - id
        - nombre
        - email
        - password
      properties:
        id:
          type: integer
          readOnly: true
        nombre:
          type: string
        password:
          type: string
          format: password
        email:
          type: string
          format: email
        role:
          type: string
          enum: 
            - superadmin
            - regular
            
            
    Error:
      type: object
      properties:
        code:
          description: Código de error
          type: string
        status:
          description: httpstatus
          type: integer
          format: int32
        type:
          type: string
          description: Tipo de error
        message:
          type: string
          description: Mensaje de error  